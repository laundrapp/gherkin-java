//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/gherkin-java/src/main/java/gherkin/TokenScanner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GherkinTokenScanner")
#ifdef RESTRICT_GherkinTokenScanner
#define INCLUDE_ALL_GherkinTokenScanner 0
#else
#define INCLUDE_ALL_GherkinTokenScanner 1
#endif
#undef RESTRICT_GherkinTokenScanner

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GherkinTokenScanner_) && (INCLUDE_ALL_GherkinTokenScanner || defined(INCLUDE_GherkinTokenScanner))
#define GherkinTokenScanner_

#define RESTRICT_GherkinParser 1
#define INCLUDE_GherkinParser_ITokenScanner 1
#include "gherkin/Parser.h"

@class GherkinToken;
@class JavaIoReader;

/*!
 @brief <p>
  The scanner reads a gherkin doc (typically read from a .feature file) and creates a token
  for each line.
 The tokens are passed to the parser, which outputs an AST (Abstract Syntax Tree).</p>
  <p>
  If the scanner sees a # language header, it will reconfigure itself dynamically to look for
  Gherkin keywords for the associated language. The keywords are defined in gherkin-languages.json.</p>
 */
@interface GherkinTokenScanner : NSObject < GherkinParser_ITokenScanner >

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)source;

- (instancetype __nonnull)initWithNSString:(NSString *)source;

- (GherkinToken *)read;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GherkinTokenScanner)

FOUNDATION_EXPORT void GherkinTokenScanner_initWithNSString_(GherkinTokenScanner *self, NSString *source);

FOUNDATION_EXPORT GherkinTokenScanner *new_GherkinTokenScanner_initWithNSString_(NSString *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GherkinTokenScanner *create_GherkinTokenScanner_initWithNSString_(NSString *source);

FOUNDATION_EXPORT void GherkinTokenScanner_initWithJavaIoReader_(GherkinTokenScanner *self, JavaIoReader *source);

FOUNDATION_EXPORT GherkinTokenScanner *new_GherkinTokenScanner_initWithJavaIoReader_(JavaIoReader *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GherkinTokenScanner *create_GherkinTokenScanner_initWithJavaIoReader_(JavaIoReader *source);

J2OBJC_TYPE_LITERAL_HEADER(GherkinTokenScanner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GherkinTokenScanner")
