//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/Parser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GherkinParser")
#ifdef RESTRICT_GherkinParser
#define INCLUDE_ALL_GherkinParser 0
#else
#define INCLUDE_ALL_GherkinParser 1
#endif
#undef RESTRICT_GherkinParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GHKParser_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser))
#define GHKParser_

@class JavaIoReader;
@protocol GHKParser_Builder;
@protocol GHKParser_ITokenMatcher;
@protocol GHKParser_ITokenScanner;

@interface GHKParser : NSObject {
 @public
  jboolean stopAtFirstError_;
}

#pragma mark Public

- (instancetype __nonnull)initWithGHKParser_Builder:(id<GHKParser_Builder>)builder;

- (id)parseWithGHKParser_ITokenScanner:(id<GHKParser_ITokenScanner>)tokenScanner;

- (id)parseWithGHKParser_ITokenScanner:(id<GHKParser_ITokenScanner>)tokenScanner
           withGHKParser_ITokenMatcher:(id<GHKParser_ITokenMatcher>)tokenMatcher;

- (id)parseWithJavaIoReader:(JavaIoReader *)source;

- (id)parseWithJavaIoReader:(JavaIoReader *)source
withGHKParser_ITokenMatcher:(id<GHKParser_ITokenMatcher>)tokenMatcher;

- (id)parseWithNSString:(NSString *)source;

- (id)parseWithNSString:(NSString *)source
withGHKParser_ITokenMatcher:(id<GHKParser_ITokenMatcher>)tokenMatcher;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKParser)

FOUNDATION_EXPORT void GHKParser_initWithGHKParser_Builder_(GHKParser *self, id<GHKParser_Builder> builder);

FOUNDATION_EXPORT GHKParser *new_GHKParser_initWithGHKParser_Builder_(id<GHKParser_Builder> builder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKParser *create_GHKParser_initWithGHKParser_Builder_(id<GHKParser_Builder> builder);

J2OBJC_TYPE_LITERAL_HEADER(GHKParser)

@compatibility_alias GherkinParser GHKParser;

#endif

#if !defined (GHKParser_TokenType_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_TokenType))
#define GHKParser_TokenType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, GHKParser_TokenType_Enum) {
  GHKParser_TokenType_Enum_None = 0,
  GHKParser_TokenType_Enum_EOF = 1,
  GHKParser_TokenType_Enum_Empty = 2,
  GHKParser_TokenType_Enum_Comment = 3,
  GHKParser_TokenType_Enum_TagLine = 4,
  GHKParser_TokenType_Enum_FeatureLine = 5,
  GHKParser_TokenType_Enum_BackgroundLine = 6,
  GHKParser_TokenType_Enum_ScenarioLine = 7,
  GHKParser_TokenType_Enum_ScenarioOutlineLine = 8,
  GHKParser_TokenType_Enum_ExamplesLine = 9,
  GHKParser_TokenType_Enum_StepLine = 10,
  GHKParser_TokenType_Enum_DocStringSeparator = 11,
  GHKParser_TokenType_Enum_TableRow = 12,
  GHKParser_TokenType_Enum_Language = 13,
  GHKParser_TokenType_Enum_Other = 14,
};

@interface GHKParser_TokenType : JavaLangEnum

#pragma mark Public

+ (GHKParser_TokenType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(GHKParser_TokenType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT GHKParser_TokenType *GHKParser_TokenType_values_[];

inline GHKParser_TokenType *GHKParser_TokenType_get_None(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, None)

inline GHKParser_TokenType *GHKParser_TokenType_get_EOF(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, EOF)

inline GHKParser_TokenType *GHKParser_TokenType_get_Empty(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, Empty)

inline GHKParser_TokenType *GHKParser_TokenType_get_Comment(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, Comment)

inline GHKParser_TokenType *GHKParser_TokenType_get_TagLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, TagLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_FeatureLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, FeatureLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_BackgroundLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, BackgroundLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_ScenarioLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, ScenarioLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_ScenarioOutlineLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, ScenarioOutlineLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_ExamplesLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, ExamplesLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_StepLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, StepLine)

inline GHKParser_TokenType *GHKParser_TokenType_get_DocStringSeparator(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, DocStringSeparator)

inline GHKParser_TokenType *GHKParser_TokenType_get_TableRow(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, TableRow)

inline GHKParser_TokenType *GHKParser_TokenType_get_Language(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, Language)

inline GHKParser_TokenType *GHKParser_TokenType_get_Other(void);
J2OBJC_ENUM_CONSTANT(GHKParser_TokenType, Other)

FOUNDATION_EXPORT IOSObjectArray *GHKParser_TokenType_values(void);

FOUNDATION_EXPORT GHKParser_TokenType *GHKParser_TokenType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT GHKParser_TokenType *GHKParser_TokenType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_TokenType)

#endif

#if !defined (GHKParser_RuleType_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_RuleType))
#define GHKParser_RuleType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class GHKParser_TokenType;
@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, GHKParser_RuleType_Enum) {
  GHKParser_RuleType_Enum_None = 0,
  GHKParser_RuleType_Enum__EOF = 1,
  GHKParser_RuleType_Enum__Empty = 2,
  GHKParser_RuleType_Enum__Comment = 3,
  GHKParser_RuleType_Enum__TagLine = 4,
  GHKParser_RuleType_Enum__FeatureLine = 5,
  GHKParser_RuleType_Enum__BackgroundLine = 6,
  GHKParser_RuleType_Enum__ScenarioLine = 7,
  GHKParser_RuleType_Enum__ScenarioOutlineLine = 8,
  GHKParser_RuleType_Enum__ExamplesLine = 9,
  GHKParser_RuleType_Enum__StepLine = 10,
  GHKParser_RuleType_Enum__DocStringSeparator = 11,
  GHKParser_RuleType_Enum__TableRow = 12,
  GHKParser_RuleType_Enum__Language = 13,
  GHKParser_RuleType_Enum__Other = 14,
  GHKParser_RuleType_Enum_GherkinDocument = 15,
  GHKParser_RuleType_Enum_Feature = 16,
  GHKParser_RuleType_Enum_Feature_Header = 17,
  GHKParser_RuleType_Enum_Background = 18,
  GHKParser_RuleType_Enum_Scenario_Definition = 19,
  GHKParser_RuleType_Enum_Scenario = 20,
  GHKParser_RuleType_Enum_ScenarioOutline = 21,
  GHKParser_RuleType_Enum_Examples_Definition = 22,
  GHKParser_RuleType_Enum_Examples = 23,
  GHKParser_RuleType_Enum_Examples_Table = 24,
  GHKParser_RuleType_Enum_Step = 25,
  GHKParser_RuleType_Enum_Step_Arg = 26,
  GHKParser_RuleType_Enum_DataTable = 27,
  GHKParser_RuleType_Enum_DocString = 28,
  GHKParser_RuleType_Enum_Tags = 29,
  GHKParser_RuleType_Enum_Description_Helper = 30,
  GHKParser_RuleType_Enum_Description = 31,
};

@interface GHKParser_RuleType : JavaLangEnum

#pragma mark Public

+ (GHKParser_RuleType *)castWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType;

+ (GHKParser_RuleType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(GHKParser_RuleType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT GHKParser_RuleType *GHKParser_RuleType_values_[];

inline GHKParser_RuleType *GHKParser_RuleType_get_None(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, None)

inline GHKParser_RuleType *GHKParser_RuleType_get__EOF(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _EOF)

inline GHKParser_RuleType *GHKParser_RuleType_get__Empty(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _Empty)

inline GHKParser_RuleType *GHKParser_RuleType_get__Comment(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _Comment)

inline GHKParser_RuleType *GHKParser_RuleType_get__TagLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _TagLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__FeatureLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _FeatureLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__BackgroundLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _BackgroundLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__ScenarioLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _ScenarioLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__ScenarioOutlineLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _ScenarioOutlineLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__ExamplesLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _ExamplesLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__StepLine(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _StepLine)

inline GHKParser_RuleType *GHKParser_RuleType_get__DocStringSeparator(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _DocStringSeparator)

inline GHKParser_RuleType *GHKParser_RuleType_get__TableRow(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _TableRow)

inline GHKParser_RuleType *GHKParser_RuleType_get__Language(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _Language)

inline GHKParser_RuleType *GHKParser_RuleType_get__Other(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, _Other)

inline GHKParser_RuleType *GHKParser_RuleType_get_GherkinDocument(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, GherkinDocument)

inline GHKParser_RuleType *GHKParser_RuleType_get_Feature(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Feature)

inline GHKParser_RuleType *GHKParser_RuleType_get_Feature_Header(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Feature_Header)

inline GHKParser_RuleType *GHKParser_RuleType_get_Background(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Background)

inline GHKParser_RuleType *GHKParser_RuleType_get_Scenario_Definition(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Scenario_Definition)

inline GHKParser_RuleType *GHKParser_RuleType_get_Scenario(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Scenario)

inline GHKParser_RuleType *GHKParser_RuleType_get_ScenarioOutline(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, ScenarioOutline)

inline GHKParser_RuleType *GHKParser_RuleType_get_Examples_Definition(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Examples_Definition)

inline GHKParser_RuleType *GHKParser_RuleType_get_Examples(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Examples)

inline GHKParser_RuleType *GHKParser_RuleType_get_Examples_Table(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Examples_Table)

inline GHKParser_RuleType *GHKParser_RuleType_get_Step(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Step)

inline GHKParser_RuleType *GHKParser_RuleType_get_Step_Arg(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Step_Arg)

inline GHKParser_RuleType *GHKParser_RuleType_get_DataTable(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, DataTable)

inline GHKParser_RuleType *GHKParser_RuleType_get_DocString(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, DocString)

inline GHKParser_RuleType *GHKParser_RuleType_get_Tags(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Tags)

inline GHKParser_RuleType *GHKParser_RuleType_get_Description_Helper(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Description_Helper)

inline GHKParser_RuleType *GHKParser_RuleType_get_Description(void);
J2OBJC_ENUM_CONSTANT(GHKParser_RuleType, Description)

FOUNDATION_EXPORT GHKParser_RuleType *GHKParser_RuleType_castWithGHKParser_TokenType_(GHKParser_TokenType *tokenType);

FOUNDATION_EXPORT IOSObjectArray *GHKParser_RuleType_values(void);

FOUNDATION_EXPORT GHKParser_RuleType *GHKParser_RuleType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT GHKParser_RuleType *GHKParser_RuleType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_RuleType)

#endif

#if !defined (GHKParser_ParserContext_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_ParserContext))
#define GHKParser_ParserContext_

@class GHKParser;
@protocol GHKParser_ITokenMatcher;
@protocol GHKParser_ITokenScanner;
@protocol JavaUtilList;
@protocol JavaUtilQueue;

@interface GHKParser_ParserContext : NSObject {
 @public
  id<GHKParser_ITokenScanner> tokenScanner_;
  id<GHKParser_ITokenMatcher> tokenMatcher_;
  id<JavaUtilQueue> tokenQueue_;
  id<JavaUtilList> errors_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithGHKParser:(GHKParser *)outer$
                withGHKParser_ITokenScanner:(id<GHKParser_ITokenScanner>)tokenScanner
                withGHKParser_ITokenMatcher:(id<GHKParser_ITokenMatcher>)tokenMatcher
                          withJavaUtilQueue:(id<JavaUtilQueue>)tokenQueue
                           withJavaUtilList:(id<JavaUtilList>)errors;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKParser_ParserContext)

J2OBJC_FIELD_SETTER(GHKParser_ParserContext, tokenScanner_, id<GHKParser_ITokenScanner>)
J2OBJC_FIELD_SETTER(GHKParser_ParserContext, tokenMatcher_, id<GHKParser_ITokenMatcher>)
J2OBJC_FIELD_SETTER(GHKParser_ParserContext, tokenQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(GHKParser_ParserContext, errors_, id<JavaUtilList>)

FOUNDATION_EXPORT void GHKParser_ParserContext_initWithGHKParser_withGHKParser_ITokenScanner_withGHKParser_ITokenMatcher_withJavaUtilQueue_withJavaUtilList_(GHKParser_ParserContext *self, GHKParser *outer$, id<GHKParser_ITokenScanner> tokenScanner, id<GHKParser_ITokenMatcher> tokenMatcher, id<JavaUtilQueue> tokenQueue, id<JavaUtilList> errors);

FOUNDATION_EXPORT GHKParser_ParserContext *new_GHKParser_ParserContext_initWithGHKParser_withGHKParser_ITokenScanner_withGHKParser_ITokenMatcher_withJavaUtilQueue_withJavaUtilList_(GHKParser *outer$, id<GHKParser_ITokenScanner> tokenScanner, id<GHKParser_ITokenMatcher> tokenMatcher, id<JavaUtilQueue> tokenQueue, id<JavaUtilList> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKParser_ParserContext *create_GHKParser_ParserContext_initWithGHKParser_withGHKParser_ITokenScanner_withGHKParser_ITokenMatcher_withJavaUtilQueue_withJavaUtilList_(GHKParser *outer$, id<GHKParser_ITokenScanner> tokenScanner, id<GHKParser_ITokenMatcher> tokenMatcher, id<JavaUtilQueue> tokenQueue, id<JavaUtilList> errors);

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_ParserContext)

#endif

#if !defined (GHKParser_Builder_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_Builder))
#define GHKParser_Builder_

@class GHKParser_RuleType;
@class GHKToken;

@protocol GHKParser_Builder < JavaObject >

- (void)buildWithGHKToken:(GHKToken *)token;

- (void)startRuleWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (void)endRuleWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (id)getResult;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKParser_Builder)

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_Builder)

#endif

#if !defined (GHKParser_ITokenScanner_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_ITokenScanner))
#define GHKParser_ITokenScanner_

@class GHKToken;

@protocol GHKParser_ITokenScanner < JavaObject >

- (GHKToken *)read;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKParser_ITokenScanner)

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_ITokenScanner)

#endif

#if !defined (GHKParser_ITokenMatcher_) && (INCLUDE_ALL_GherkinParser || defined(INCLUDE_GHKParser_ITokenMatcher))
#define GHKParser_ITokenMatcher_

@class GHKToken;

@protocol GHKParser_ITokenMatcher < JavaObject >

- (jboolean)match_EOFWithGHKToken:(GHKToken *)token;

- (jboolean)match_EmptyWithGHKToken:(GHKToken *)token;

- (jboolean)match_CommentWithGHKToken:(GHKToken *)token;

- (jboolean)match_TagLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_FeatureLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_BackgroundLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_ScenarioLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_ScenarioOutlineLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_ExamplesLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_StepLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_DocStringSeparatorWithGHKToken:(GHKToken *)token;

- (jboolean)match_TableRowWithGHKToken:(GHKToken *)token;

- (jboolean)match_LanguageWithGHKToken:(GHKToken *)token;

- (jboolean)match_OtherWithGHKToken:(GHKToken *)token;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKParser_ITokenMatcher)

J2OBJC_TYPE_LITERAL_HEADER(GHKParser_ITokenMatcher)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GherkinParser")
