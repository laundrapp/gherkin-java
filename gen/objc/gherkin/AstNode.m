//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/AstNode.java
//

#include "J2ObjC_source.h"
#include "gherkin/AstNode.h"
#include "gherkin/Parser.h"
#include "gherkin/Token.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface GHKAstNode () {
 @public
  id<JavaUtilMap> subItems_;
}

@end

J2OBJC_FIELD_SETTER(GHKAstNode, subItems_, id<JavaUtilMap>)

@implementation GHKAstNode

- (instancetype __nonnull)initWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType {
  GHKAstNode_initWithGHKParser_RuleType_(self, ruleType);
  return self;
}

- (void)addWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                           withId:(id)obj {
  id<JavaUtilList> items = [((id<JavaUtilMap>) nil_chk(subItems_)) getWithId:ruleType];
  if (items == nil) {
    items = create_JavaUtilArrayList_init();
    [subItems_ putWithId:ruleType withId:items];
  }
  [items addWithId:obj];
}

- (id)getSingleWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                               withId:(id)defaultResult {
  id<JavaUtilList> items = [self getItemsWithGHKParser_RuleType:ruleType];
  return ([((id<JavaUtilList>) nil_chk(items)) isEmpty] ? defaultResult : [items getWithInt:0]);
}

- (id<JavaUtilList>)getItemsWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType {
  id<JavaUtilList> items = [((id<JavaUtilMap>) nil_chk(subItems_)) getWithId:ruleType];
  if (items == nil) {
    return JavaUtilCollections_emptyList();
  }
  return items;
}

- (GHKToken *)getTokenWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType {
  GHKParser_RuleType *ruleType = GHKParser_RuleType_castWithGHKParser_TokenType_(tokenType);
  return [self getSingleWithGHKParser_RuleType:ruleType withId:create_GHKToken_initWithGHKIGherkinLine_withGHKALocation_(nil, nil)];
}

- (id<JavaUtilList>)getTokensWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType {
  return [self getItemsWithGHKParser_RuleType:GHKParser_RuleType_castWithGHKParser_TokenType_(tokenType)];
}

- (void)dealloc {
  RELEASE_(subItems_);
  RELEASE_(ruleType_);
  [super dealloc];
}

@end

void GHKAstNode_initWithGHKParser_RuleType_(GHKAstNode *self, GHKParser_RuleType *ruleType) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->subItems_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->ruleType_, ruleType);
}

GHKAstNode *new_GHKAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType) {
  J2OBJC_NEW_IMPL(GHKAstNode, initWithGHKParser_RuleType_, ruleType)
}

GHKAstNode *create_GHKAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType) {
  J2OBJC_CREATE_IMPL(GHKAstNode, initWithGHKParser_RuleType_, ruleType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKAstNode)
