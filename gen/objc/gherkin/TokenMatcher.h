//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/TokenMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GherkinTokenMatcher")
#ifdef RESTRICT_GherkinTokenMatcher
#define INCLUDE_ALL_GherkinTokenMatcher 0
#else
#define INCLUDE_ALL_GherkinTokenMatcher 1
#endif
#undef RESTRICT_GherkinTokenMatcher

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GHKTokenMatcher_) && (INCLUDE_ALL_GherkinTokenMatcher || defined(INCLUDE_GHKTokenMatcher))
#define GHKTokenMatcher_

#define RESTRICT_GherkinParser 1
#define INCLUDE_GHKParser_ITokenMatcher 1
#include "gherkin/Parser.h"

@class GHKGherkinDialect;
@class GHKParser_TokenType;
@class GHKToken;
@class JavaLangInteger;
@protocol GHKIGherkinDialectProvider;
@protocol JavaUtilList;

@interface GHKTokenMatcher : NSObject < GHKParser_ITokenMatcher >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithGHKIGherkinDialectProvider:(id<GHKIGherkinDialectProvider>)dialectProvider;

- (instancetype __nonnull)initWithNSString:(NSString *)defaultDialectName;

- (GHKGherkinDialect *)getCurrentDialect;

- (jboolean)match_BackgroundLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_CommentWithGHKToken:(GHKToken *)token;

- (jboolean)match_DocStringSeparatorWithGHKToken:(GHKToken *)token;

- (jboolean)match_EmptyWithGHKToken:(GHKToken *)token;

- (jboolean)match_EOFWithGHKToken:(GHKToken *)token;

- (jboolean)match_ExamplesLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_FeatureLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_LanguageWithGHKToken:(GHKToken *)token;

- (jboolean)match_OtherWithGHKToken:(GHKToken *)token;

- (jboolean)match_ScenarioLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_ScenarioOutlineLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_StepLineWithGHKToken:(GHKToken *)token;

- (jboolean)match_TableRowWithGHKToken:(GHKToken *)token;

- (jboolean)match_TagLineWithGHKToken:(GHKToken *)token;

- (void)reset;

#pragma mark Protected

- (void)setTokenMatchedWithGHKToken:(GHKToken *)token
            withGHKParser_TokenType:(GHKParser_TokenType *)matchedType
                       withNSString:(NSString *)text
                       withNSString:(NSString *)keyword
                withJavaLangInteger:(JavaLangInteger *)indent
                   withJavaUtilList:(id<JavaUtilList>)items;

@end

J2OBJC_STATIC_INIT(GHKTokenMatcher)

FOUNDATION_EXPORT void GHKTokenMatcher_initWithGHKIGherkinDialectProvider_(GHKTokenMatcher *self, id<GHKIGherkinDialectProvider> dialectProvider);

FOUNDATION_EXPORT GHKTokenMatcher *new_GHKTokenMatcher_initWithGHKIGherkinDialectProvider_(id<GHKIGherkinDialectProvider> dialectProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKTokenMatcher *create_GHKTokenMatcher_initWithGHKIGherkinDialectProvider_(id<GHKIGherkinDialectProvider> dialectProvider);

FOUNDATION_EXPORT void GHKTokenMatcher_init(GHKTokenMatcher *self);

FOUNDATION_EXPORT GHKTokenMatcher *new_GHKTokenMatcher_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKTokenMatcher *create_GHKTokenMatcher_init(void);

FOUNDATION_EXPORT void GHKTokenMatcher_initWithNSString_(GHKTokenMatcher *self, NSString *defaultDialectName);

FOUNDATION_EXPORT GHKTokenMatcher *new_GHKTokenMatcher_initWithNSString_(NSString *defaultDialectName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKTokenMatcher *create_GHKTokenMatcher_initWithNSString_(NSString *defaultDialectName);

J2OBJC_TYPE_LITERAL_HEADER(GHKTokenMatcher)

@compatibility_alias GherkinTokenMatcher GHKTokenMatcher;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GherkinTokenMatcher")
