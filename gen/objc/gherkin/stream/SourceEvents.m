//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/gherkin-java/src/main/java/gherkin/stream/SourceEvents.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gherkin/events/SourceEvent.h"
#include "gherkin/stream/SourceEvents.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface GherkinStreamSourceEvents () {
 @public
  id<JavaUtilList> paths_;
}

@end

J2OBJC_FIELD_SETTER(GherkinStreamSourceEvents, paths_, id<JavaUtilList>)

__attribute__((unused)) static NSString *GherkinStreamSourceEvents_readWithJavaIoReader_(JavaIoReader *reader);

@interface GherkinStreamSourceEvents_1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> val$pathIterator_;
}

- (jboolean)hasNext;

- (GherkinEventsSourceEvent *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(GherkinStreamSourceEvents_1)

__attribute__((unused)) static void GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(GherkinStreamSourceEvents_1 *self, id<JavaUtilIterator> capture$0);

__attribute__((unused)) static GherkinStreamSourceEvents_1 *new_GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static GherkinStreamSourceEvents_1 *create_GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0);

@implementation GherkinStreamSourceEvents

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)paths {
  GherkinStreamSourceEvents_initWithJavaUtilList_(self, paths);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> pathIterator = [((id<JavaUtilList>) nil_chk(paths_)) iterator];
  return create_GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(pathIterator);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(paths_);
  [super dealloc];
}

@end

void GherkinStreamSourceEvents_initWithJavaUtilList_(GherkinStreamSourceEvents *self, id<JavaUtilList> paths) {
  NSObject_init(self);
  JreStrongAssign(&self->paths_, paths);
}

GherkinStreamSourceEvents *new_GherkinStreamSourceEvents_initWithJavaUtilList_(id<JavaUtilList> paths) {
  J2OBJC_NEW_IMPL(GherkinStreamSourceEvents, initWithJavaUtilList_, paths)
}

GherkinStreamSourceEvents *create_GherkinStreamSourceEvents_initWithJavaUtilList_(id<JavaUtilList> paths) {
  J2OBJC_CREATE_IMPL(GherkinStreamSourceEvents, initWithJavaUtilList_, paths)
}

NSString *GherkinStreamSourceEvents_readWithJavaIoReader_(JavaIoReader *reader) {
  GherkinStreamSourceEvents_initialize();
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:(jint) 0x10000];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  jint read;
  do {
    read = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buffer withInt:0 withInt:buffer->size_];
    if (read > 0) {
      [sb appendWithCharArray:buffer withInt:0 withInt:read];
    }
  }
  while (read >= 0);
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GherkinStreamSourceEvents)

@implementation GherkinStreamSourceEvents_1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$pathIterator_)) hasNext];
}

- (GherkinEventsSourceEvent *)next {
  @try {
    NSString *path = [((id<JavaUtilIterator>) nil_chk(val$pathIterator_)) next];
    NSString *data = GherkinStreamSourceEvents_readWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithNSString_(path), @"UTF-8"));
    return create_GherkinEventsSourceEvent_initWithNSString_withNSString_(path, data);
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(val$pathIterator_);
  [super dealloc];
}

@end

void GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(GherkinStreamSourceEvents_1 *self, id<JavaUtilIterator> capture$0) {
  JreStrongAssign(&self->val$pathIterator_, capture$0);
  NSObject_init(self);
}

GherkinStreamSourceEvents_1 *new_GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_NEW_IMPL(GherkinStreamSourceEvents_1, initWithJavaUtilIterator_, capture$0)
}

GherkinStreamSourceEvents_1 *create_GherkinStreamSourceEvents_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_CREATE_IMPL(GherkinStreamSourceEvents_1, initWithJavaUtilIterator_, capture$0)
}
