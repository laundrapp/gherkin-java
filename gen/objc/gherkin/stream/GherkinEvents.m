//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/stream/GherkinEvents.java
//

#include "J2ObjC_source.h"
#include "gherkin/AstBuilder.h"
#include "gherkin/Parser.h"
#include "gherkin/ParserException.h"
#include "gherkin/TokenMatcher.h"
#include "gherkin/ast/GherkinDocument.h"
#include "gherkin/ast/Location.h"
#include "gherkin/events/AttachmentEvent.h"
#include "gherkin/events/GherkinDocumentEvent.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/events/SourceEvent.h"
#include "gherkin/pickles/Compiler.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/stream/GherkinEvents.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GHKGherkinEvents () {
 @public
  GHKParser *parser_;
  GHKTokenMatcher *matcher_;
  GHKCompiler *compiler_;
  jboolean printSource_;
  jboolean printAst_;
  jboolean printPickles_;
}

@end

J2OBJC_FIELD_SETTER(GHKGherkinEvents, parser_, GHKParser *)
J2OBJC_FIELD_SETTER(GHKGherkinEvents, matcher_, GHKTokenMatcher *)
J2OBJC_FIELD_SETTER(GHKGherkinEvents, compiler_, GHKCompiler *)

__attribute__((unused)) static void GHKGherkinEvents_addErrorAttachmentWithJavaUtilList_withGHKParserException_withNSString_(GHKGherkinEvents *self, id<JavaUtilList> cucumberEvents, GHKParserException *e, NSString *uri);

@implementation GHKGherkinEvents

- (instancetype __nonnull)initWithBoolean:(jboolean)printSource
                              withBoolean:(jboolean)printAst
                              withBoolean:(jboolean)printPickles {
  GHKGherkinEvents_initWithBoolean_withBoolean_withBoolean_(self, printSource, printAst, printPickles);
  return self;
}

- (id<JavaLangIterable>)iterableWithGHKSourceEvent:(GHKSourceEvent *)sourceEvent {
  id<JavaUtilList> cucumberEvents = create_JavaUtilArrayList_init();
  @try {
    GHKAGherkinDocument *gherkinDocument = [((GHKParser *) nil_chk(parser_)) parseWithNSString:((GHKSourceEvent *) nil_chk(sourceEvent))->data_ withGHKParser_ITokenMatcher:matcher_];
    if (printSource_) {
      [cucumberEvents addWithId:sourceEvent];
    }
    if (printAst_) {
      [cucumberEvents addWithId:create_GHKGherkinDocumentEvent_initWithNSString_withGHKAGherkinDocument_(sourceEvent->uri_, gherkinDocument)];
    }
    if (printPickles_) {
      id<JavaUtilList> pickles = [((GHKCompiler *) nil_chk(compiler_)) compileWithGHKAGherkinDocument:gherkinDocument];
      for (GHKPickle * __strong pickle in nil_chk(pickles)) {
        [cucumberEvents addWithId:create_GHKPickleEvent_initWithNSString_withGHKPickle_(sourceEvent->uri_, pickle)];
      }
    }
  }
  @catch (GHKParserException_CompositeParserException *e) {
    for (GHKParserException * __strong error in nil_chk(e->errors_)) {
      GHKGherkinEvents_addErrorAttachmentWithJavaUtilList_withGHKParserException_withNSString_(self, cucumberEvents, error, sourceEvent->uri_);
    }
  }
  @catch (GHKParserException *e) {
    GHKGherkinEvents_addErrorAttachmentWithJavaUtilList_withGHKParserException_withNSString_(self, cucumberEvents, e, sourceEvent->uri_);
  }
  return cucumberEvents;
}

- (void)dealloc {
  RELEASE_(parser_);
  RELEASE_(matcher_);
  RELEASE_(compiler_);
  [super dealloc];
}

@end

void GHKGherkinEvents_initWithBoolean_withBoolean_withBoolean_(GHKGherkinEvents *self, jboolean printSource, jboolean printAst, jboolean printPickles) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->parser_, new_GHKParser_initWithGHKParser_Builder_(create_GHKAstBuilder_init()));
  JreStrongAssignAndConsume(&self->matcher_, new_GHKTokenMatcher_init());
  JreStrongAssignAndConsume(&self->compiler_, new_GHKCompiler_init());
  self->printSource_ = printSource;
  self->printAst_ = printAst;
  self->printPickles_ = printPickles;
}

GHKGherkinEvents *new_GHKGherkinEvents_initWithBoolean_withBoolean_withBoolean_(jboolean printSource, jboolean printAst, jboolean printPickles) {
  J2OBJC_NEW_IMPL(GHKGherkinEvents, initWithBoolean_withBoolean_withBoolean_, printSource, printAst, printPickles)
}

GHKGherkinEvents *create_GHKGherkinEvents_initWithBoolean_withBoolean_withBoolean_(jboolean printSource, jboolean printAst, jboolean printPickles) {
  J2OBJC_CREATE_IMPL(GHKGherkinEvents, initWithBoolean_withBoolean_withBoolean_, printSource, printAst, printPickles)
}

void GHKGherkinEvents_addErrorAttachmentWithJavaUtilList_withGHKParserException_withNSString_(GHKGherkinEvents *self, id<JavaUtilList> cucumberEvents, GHKParserException *e, NSString *uri) {
  [((id<JavaUtilList>) nil_chk(cucumberEvents)) addWithId:create_GHKAttachmentEvent_initWithGHKAttachmentEvent_SourceRef_withNSString_(create_GHKAttachmentEvent_SourceRef_initWithNSString_withGHKAttachmentEvent_Location_(uri, create_GHKAttachmentEvent_Location_initWithInt_withInt_([((GHKALocation *) nil_chk(((GHKParserException *) nil_chk(e))->location_)) getLine], [e->location_ getColumn])), [e getMessage])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKGherkinEvents)
