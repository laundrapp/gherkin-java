//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/GherkinAstNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GherkinGherkinAstNode")
#ifdef RESTRICT_GherkinGherkinAstNode
#define INCLUDE_ALL_GherkinGherkinAstNode 0
#else
#define INCLUDE_ALL_GherkinGherkinAstNode 1
#endif
#undef RESTRICT_GherkinGherkinAstNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GHKGherkinAstNode_) && (INCLUDE_ALL_GherkinGherkinAstNode || defined(INCLUDE_GHKGherkinAstNode))
#define GHKGherkinAstNode_

@class GHKParser_RuleType;
@class GHKParser_TokenType;
@class GHKToken;
@protocol JavaUtilList;

@interface GHKGherkinAstNode : NSObject {
 @public
  GHKParser_RuleType *ruleType_;
}

#pragma mark Public

- (instancetype __nonnull)initWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (void)addWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                           withId:(id)obj;

- (id<JavaUtilList>)getItemsWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (id)getSingleWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                               withId:(id)defaultResult;

- (GHKToken *)getTokenWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType;

- (id<JavaUtilList>)getTokensWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKGherkinAstNode)

J2OBJC_FIELD_SETTER(GHKGherkinAstNode, ruleType_, GHKParser_RuleType *)

FOUNDATION_EXPORT void GHKGherkinAstNode_initWithGHKParser_RuleType_(GHKGherkinAstNode *self, GHKParser_RuleType *ruleType);

FOUNDATION_EXPORT GHKGherkinAstNode *new_GHKGherkinAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKGherkinAstNode *create_GHKGherkinAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType);

J2OBJC_TYPE_LITERAL_HEADER(GHKGherkinAstNode)

@compatibility_alias GherkinGherkinAstNode GHKGherkinAstNode;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GherkinGherkinAstNode")
