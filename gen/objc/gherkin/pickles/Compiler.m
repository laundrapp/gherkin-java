//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/pickles/Compiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "gherkin/SymbolCounter.h"
#include "gherkin/ast/AbstractNode.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/DataTable.h"
#include "gherkin/ast/DocString.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/GherkinDocument.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Scenario.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/TableCell.h"
#include "gherkin/ast/TableRow.h"
#include "gherkin/ast/Tag.h"
#include "gherkin/pickles/Compiler.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleStep.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

__attribute__((unused)) static void GHKCompiler_compileScenarioWithJavaUtilList_withJavaUtilList_withGHKAScenario_withJavaUtilList_withNSString_(GHKCompiler *self, id<JavaUtilList> pickles, id<JavaUtilList> backgroundSteps, GHKAScenario *scenario, id<JavaUtilList> featureTags, NSString *language);

__attribute__((unused)) static void GHKCompiler_compileScenarioOutlineWithJavaUtilList_withJavaUtilList_withGHKAScenarioOutline_withJavaUtilList_withNSString_(GHKCompiler *self, id<JavaUtilList> pickles, id<JavaUtilList> backgroundSteps, GHKAScenarioOutline *scenarioOutline, id<JavaUtilList> featureTags, NSString *language);

__attribute__((unused)) static id<JavaUtilList> GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_(GHKCompiler *self, GHKAAbstractNode *argument);

__attribute__((unused)) static id<JavaUtilList> GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_withJavaUtilList_withJavaUtilList_(GHKCompiler *self, GHKAAbstractNode *argument, id<JavaUtilList> variableCells, id<JavaUtilList> valueCells);

__attribute__((unused)) static id<JavaUtilList> GHKCompiler_pickleStepsWithGHKAScenarioDefinition_(GHKCompiler *self, GHKAScenarioDefinition *scenarioDefinition);

__attribute__((unused)) static GHKPickleStep *GHKCompiler_pickleStepWithGHKAStep_(GHKCompiler *self, GHKAStep *step);

__attribute__((unused)) static NSString *GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(GHKCompiler *self, NSString *name, id<JavaUtilList> variableCells, id<JavaUtilList> valueCells);

__attribute__((unused)) static GHKPickleLocation *GHKCompiler_pickleStepLocationWithGHKAStep_(GHKCompiler *self, GHKAStep *step);

__attribute__((unused)) static GHKPickleLocation *GHKCompiler_pickleLocationWithGHKALocation_(GHKCompiler *self, GHKALocation *location);

__attribute__((unused)) static id<JavaUtilList> GHKCompiler_pickleTagsWithJavaUtilList_(GHKCompiler *self, id<JavaUtilList> tags);

__attribute__((unused)) static GHKPickleTag *GHKCompiler_pickleTagWithGHKATag_(GHKCompiler *self, GHKATag *tag);

@implementation GHKCompiler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  GHKCompiler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)compileWithGHKAGherkinDocument:(GHKAGherkinDocument *)gherkinDocument {
  id<JavaUtilList> pickles = create_JavaUtilArrayList_init();
  GHKAFeature *feature = [((GHKAGherkinDocument *) nil_chk(gherkinDocument)) getFeature];
  if (feature == nil) {
    return pickles;
  }
  NSString *language = [feature getLanguage];
  id<JavaUtilList> featureTags = [feature getTags];
  id<JavaUtilList> backgroundSteps = create_JavaUtilArrayList_init();
  for (GHKAScenarioDefinition * __strong scenarioDefinition in nil_chk([feature getChildren])) {
    if ([scenarioDefinition isKindOfClass:[GHKABackground class]]) {
      backgroundSteps = GHKCompiler_pickleStepsWithGHKAScenarioDefinition_(self, scenarioDefinition);
    }
    else if ([scenarioDefinition isKindOfClass:[GHKAScenario class]]) {
      GHKCompiler_compileScenarioWithJavaUtilList_withJavaUtilList_withGHKAScenario_withJavaUtilList_withNSString_(self, pickles, backgroundSteps, (GHKAScenario *) cast_chk(scenarioDefinition, [GHKAScenario class]), featureTags, language);
    }
    else {
      GHKCompiler_compileScenarioOutlineWithJavaUtilList_withJavaUtilList_withGHKAScenarioOutline_withJavaUtilList_withNSString_(self, pickles, backgroundSteps, (GHKAScenarioOutline *) cast_chk(scenarioDefinition, [GHKAScenarioOutline class]), featureTags, language);
    }
  }
  return pickles;
}

@end

void GHKCompiler_init(GHKCompiler *self) {
  NSObject_init(self);
}

GHKCompiler *new_GHKCompiler_init() {
  J2OBJC_NEW_IMPL(GHKCompiler, init)
}

GHKCompiler *create_GHKCompiler_init() {
  J2OBJC_CREATE_IMPL(GHKCompiler, init)
}

void GHKCompiler_compileScenarioWithJavaUtilList_withJavaUtilList_withGHKAScenario_withJavaUtilList_withNSString_(GHKCompiler *self, id<JavaUtilList> pickles, id<JavaUtilList> backgroundSteps, GHKAScenario *scenario, id<JavaUtilList> featureTags, NSString *language) {
  id<JavaUtilList> steps = create_JavaUtilArrayList_init();
  if (![((id<JavaUtilList>) nil_chk([((GHKAScenario *) nil_chk(scenario)) getSteps])) isEmpty]) [steps addAllWithJavaUtilCollection:backgroundSteps];
  id<JavaUtilList> scenarioTags = create_JavaUtilArrayList_init();
  [scenarioTags addAllWithJavaUtilCollection:featureTags];
  [scenarioTags addAllWithJavaUtilCollection:[scenario getTags]];
  [steps addAllWithJavaUtilCollection:GHKCompiler_pickleStepsWithGHKAScenarioDefinition_(self, scenario)];
  GHKPickle *pickle = create_GHKPickle_initWithNSString_withNSString_withJavaUtilList_withJavaUtilList_withJavaUtilList_([scenario getName], language, steps, GHKCompiler_pickleTagsWithJavaUtilList_(self, scenarioTags), JavaUtilCollections_singletonListWithId_(GHKCompiler_pickleLocationWithGHKALocation_(self, [scenario getLocation])));
  [((id<JavaUtilList>) nil_chk(pickles)) addWithId:pickle];
}

void GHKCompiler_compileScenarioOutlineWithJavaUtilList_withJavaUtilList_withGHKAScenarioOutline_withJavaUtilList_withNSString_(GHKCompiler *self, id<JavaUtilList> pickles, id<JavaUtilList> backgroundSteps, GHKAScenarioOutline *scenarioOutline, id<JavaUtilList> featureTags, NSString *language) {
  for (GHKAExamples * __strong examples in nil_chk([((GHKAScenarioOutline *) nil_chk(scenarioOutline)) getExamples])) {
    if ([((GHKAExamples *) nil_chk(examples)) getTableHeader] == nil) continue;
    id<JavaUtilList> variableCells = [((GHKATableRow *) nil_chk([examples getTableHeader])) getCells];
    for (GHKATableRow * __strong values in nil_chk([examples getTableBody])) {
      id<JavaUtilList> valueCells = [((GHKATableRow *) nil_chk(values)) getCells];
      id<JavaUtilList> steps = create_JavaUtilArrayList_init();
      if (![((id<JavaUtilList>) nil_chk([scenarioOutline getSteps])) isEmpty]) [steps addAllWithJavaUtilCollection:backgroundSteps];
      id<JavaUtilList> tags = create_JavaUtilArrayList_init();
      [tags addAllWithJavaUtilCollection:featureTags];
      [tags addAllWithJavaUtilCollection:[scenarioOutline getTags]];
      [tags addAllWithJavaUtilCollection:[examples getTags]];
      for (GHKAStep * __strong scenarioOutlineStep in nil_chk([scenarioOutline getSteps])) {
        NSString *stepText = GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(self, [((GHKAStep *) nil_chk(scenarioOutlineStep)) getText], variableCells, valueCells);
        GHKPickleStep *pickleStep = create_GHKPickleStep_initWithNSString_withJavaUtilList_withJavaUtilList_(stepText, GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_withJavaUtilList_withJavaUtilList_(self, [scenarioOutlineStep getArgument], variableCells, valueCells), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ GHKCompiler_pickleLocationWithGHKALocation_(self, [values getLocation]), GHKCompiler_pickleStepLocationWithGHKAStep_(self, scenarioOutlineStep) } count:2 type:GHKPickleLocation_class_()]));
        [steps addWithId:pickleStep];
      }
      GHKPickle *pickle = create_GHKPickle_initWithNSString_withNSString_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(self, [scenarioOutline getName], variableCells, valueCells), language, steps, GHKCompiler_pickleTagsWithJavaUtilList_(self, tags), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ GHKCompiler_pickleLocationWithGHKALocation_(self, [values getLocation]), GHKCompiler_pickleLocationWithGHKALocation_(self, [scenarioOutline getLocation]) } count:2 type:GHKPickleLocation_class_()]));
      [((id<JavaUtilList>) nil_chk(pickles)) addWithId:pickle];
    }
  }
}

id<JavaUtilList> GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_(GHKCompiler *self, GHKAAbstractNode *argument) {
  id<JavaUtilList> noCells = JavaUtilCollections_emptyList();
  return GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_withJavaUtilList_withJavaUtilList_(self, argument, noCells, noCells);
}

id<JavaUtilList> GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_withJavaUtilList_withJavaUtilList_(GHKCompiler *self, GHKAAbstractNode *argument, id<JavaUtilList> variableCells, id<JavaUtilList> valueCells) {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  if (argument == nil) return result;
  if ([argument isKindOfClass:[GHKADataTable class]]) {
    GHKADataTable *t = (GHKADataTable *) cast_chk(argument, [GHKADataTable class]);
    id<JavaUtilList> rows = [t getRows];
    id<JavaUtilList> newRows = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(rows)) size]);
    for (GHKATableRow * __strong row in rows) {
      id<JavaUtilList> cells = [((GHKATableRow *) nil_chk(row)) getCells];
      id<JavaUtilList> newCells = create_JavaUtilArrayList_init();
      for (GHKATableCell * __strong cell in nil_chk(cells)) {
        [newCells addWithId:create_GHKPickleCell_initWithGHKPickleLocation_withNSString_(GHKCompiler_pickleLocationWithGHKALocation_(self, [((GHKATableCell *) nil_chk(cell)) getLocation]), GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(self, [cell getValue], variableCells, valueCells))];
      }
      [newRows addWithId:create_GHKPickleRow_initWithJavaUtilList_(newCells)];
    }
    [result addWithId:create_GHKPickleTable_initWithJavaUtilList_(newRows)];
  }
  else if ([argument isKindOfClass:[GHKADocString class]]) {
    GHKADocString *ds = (GHKADocString *) cast_chk(argument, [GHKADocString class]);
    [result addWithId:create_GHKPickleString_initWithGHKPickleLocation_withNSString_withNSString_(GHKCompiler_pickleLocationWithGHKALocation_(self, [ds getLocation]), GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(self, [ds getContent], variableCells, valueCells), [ds getContentType] == nil ? nil : GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(self, [ds getContentType], variableCells, valueCells))];
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Unexpected argument type: ", argument));
  }
  return result;
}

id<JavaUtilList> GHKCompiler_pickleStepsWithGHKAScenarioDefinition_(GHKCompiler *self, GHKAScenarioDefinition *scenarioDefinition) {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (GHKAStep * __strong step in nil_chk([((GHKAScenarioDefinition *) nil_chk(scenarioDefinition)) getSteps])) {
    [result addWithId:GHKCompiler_pickleStepWithGHKAStep_(self, step)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
}

GHKPickleStep *GHKCompiler_pickleStepWithGHKAStep_(GHKCompiler *self, GHKAStep *step) {
  return create_GHKPickleStep_initWithNSString_withJavaUtilList_withJavaUtilList_([((GHKAStep *) nil_chk(step)) getText], GHKCompiler_createPickleArgumentsWithGHKAAbstractNode_(self, [step getArgument]), JavaUtilCollections_singletonListWithId_(GHKCompiler_pickleStepLocationWithGHKAStep_(self, step)));
}

NSString *GHKCompiler_interpolateWithNSString_withJavaUtilList_withJavaUtilList_(GHKCompiler *self, NSString *name, id<JavaUtilList> variableCells, id<JavaUtilList> valueCells) {
  jint col = 0;
  for (GHKATableCell * __strong variableCell in nil_chk(variableCells)) {
    GHKATableCell *valueCell = [((id<JavaUtilList>) nil_chk(valueCells)) getWithInt:col++];
    NSString *header = [((GHKATableCell *) nil_chk(variableCell)) getValue];
    NSString *value = [((GHKATableCell *) nil_chk(valueCell)) getValue];
    name = [((NSString *) nil_chk(name)) java_replace:JreStrcat("C$C", '<', header, '>') withSequence:value];
  }
  return name;
}

GHKPickleLocation *GHKCompiler_pickleStepLocationWithGHKAStep_(GHKCompiler *self, GHKAStep *step) {
  return create_GHKPickleLocation_initWithInt_withInt_([((GHKALocation *) nil_chk([((GHKAStep *) nil_chk(step)) getLocation])) getLine], [((GHKALocation *) nil_chk([step getLocation])) getColumn] + ([step getKeyword] != nil ? GHKSymbolCounter_countSymbolsWithNSString_([step getKeyword]) : 0));
}

GHKPickleLocation *GHKCompiler_pickleLocationWithGHKALocation_(GHKCompiler *self, GHKALocation *location) {
  return create_GHKPickleLocation_initWithInt_withInt_([((GHKALocation *) nil_chk(location)) getLine], [location getColumn]);
}

id<JavaUtilList> GHKCompiler_pickleTagsWithJavaUtilList_(GHKCompiler *self, id<JavaUtilList> tags) {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (GHKATag * __strong tag in nil_chk(tags)) {
    [result addWithId:GHKCompiler_pickleTagWithGHKATag_(self, tag)];
  }
  return result;
}

GHKPickleTag *GHKCompiler_pickleTagWithGHKATag_(GHKCompiler *self, GHKATag *tag) {
  return create_GHKPickleTag_initWithGHKPickleLocation_withNSString_(GHKCompiler_pickleLocationWithGHKALocation_(self, [((GHKATag *) nil_chk(tag)) getLocation]), [tag getName]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKCompiler)
