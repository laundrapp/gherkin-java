//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/TokenFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "gherkin/GherkinLineSpan.h"
#include "gherkin/Parser.h"
#include "gherkin/StringUtils.h"
#include "gherkin/Token.h"
#include "gherkin/TokenFormatter.h"
#include "gherkin/ast/Location.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"

inline id<GHKStringUtils_ToString> GHKTokenFormatter_get_SPAN_TO_STRING(void);
static id<GHKStringUtils_ToString> GHKTokenFormatter_SPAN_TO_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GHKTokenFormatter, SPAN_TO_STRING, id<GHKStringUtils_ToString>)

__attribute__((unused)) static NSString *GHKTokenFormatter_toStringWithId_(GHKTokenFormatter *self, id o);

@interface GHKTokenFormatter_1 : NSObject < GHKStringUtils_ToString >

- (NSString *)toStringWithId:(GHKGherkinLineSpan *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKTokenFormatter_1)

__attribute__((unused)) static void GHKTokenFormatter_1_init(GHKTokenFormatter_1 *self);

__attribute__((unused)) static GHKTokenFormatter_1 *new_GHKTokenFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GHKTokenFormatter_1 *create_GHKTokenFormatter_1_init(void);

J2OBJC_INITIALIZED_DEFN(GHKTokenFormatter)

@implementation GHKTokenFormatter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  GHKTokenFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)formatTokenWithGHKToken:(GHKToken *)token {
  if ([((GHKToken *) nil_chk(token)) isEOF]) return @"EOF";
  return NSString_java_formatWithNSString_withNSObjectArray_(@"(%s:%s)%s:%s/%s/%s", [IOSObjectArray arrayWithObjects:(id[]){ GHKTokenFormatter_toStringWithId_(self, JavaLangInteger_valueOfWithInt_([((GHKALocation *) nil_chk(token->location_)) getLine])), GHKTokenFormatter_toStringWithId_(self, JavaLangInteger_valueOfWithInt_([((GHKALocation *) nil_chk(token->location_)) getColumn])), GHKTokenFormatter_toStringWithId_(self, token->matchedType_), GHKTokenFormatter_toStringWithId_(self, token->matchedKeyword_), GHKTokenFormatter_toStringWithId_(self, token->matchedText_), GHKTokenFormatter_toStringWithId_(self, token->mathcedItems_ == nil ? @"" : GHKStringUtils_joinWithGHKStringUtils_ToString_withNSString_withJavaLangIterable_(GHKTokenFormatter_SPAN_TO_STRING, @",", token->mathcedItems_)) } count:6 type:NSObject_class_()]);
}

+ (void)initialize {
  if (self == [GHKTokenFormatter class]) {
    JreStrongAssignAndConsume(&GHKTokenFormatter_SPAN_TO_STRING, new_GHKTokenFormatter_1_init());
    J2OBJC_SET_INITIALIZED(GHKTokenFormatter)
  }
}

@end

void GHKTokenFormatter_init(GHKTokenFormatter *self) {
  NSObject_init(self);
}

GHKTokenFormatter *new_GHKTokenFormatter_init() {
  J2OBJC_NEW_IMPL(GHKTokenFormatter, init)
}

GHKTokenFormatter *create_GHKTokenFormatter_init() {
  J2OBJC_CREATE_IMPL(GHKTokenFormatter, init)
}

NSString *GHKTokenFormatter_toStringWithId_(GHKTokenFormatter *self, id o) {
  return o == nil ? @"" : [o description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKTokenFormatter)

@implementation GHKTokenFormatter_1

- (NSString *)toStringWithId:(GHKGherkinLineSpan *)o {
  return JreStrcat("IC$", ((GHKGherkinLineSpan *) nil_chk(o))->column_, ':', o->text_);
}

@end

void GHKTokenFormatter_1_init(GHKTokenFormatter_1 *self) {
  NSObject_init(self);
}

GHKTokenFormatter_1 *new_GHKTokenFormatter_1_init() {
  J2OBJC_NEW_IMPL(GHKTokenFormatter_1, init)
}

GHKTokenFormatter_1 *create_GHKTokenFormatter_1_init() {
  J2OBJC_CREATE_IMPL(GHKTokenFormatter_1, init)
}
