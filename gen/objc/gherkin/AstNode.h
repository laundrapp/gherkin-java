//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/AstNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GherkinAstNode")
#ifdef RESTRICT_GherkinAstNode
#define INCLUDE_ALL_GherkinAstNode 0
#else
#define INCLUDE_ALL_GherkinAstNode 1
#endif
#undef RESTRICT_GherkinAstNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GHKAstNode_) && (INCLUDE_ALL_GherkinAstNode || defined(INCLUDE_GHKAstNode))
#define GHKAstNode_

@class GHKParser_RuleType;
@class GHKParser_TokenType;
@class GHKToken;
@protocol JavaUtilList;

@interface GHKAstNode : NSObject {
 @public
  GHKParser_RuleType *ruleType_;
}

#pragma mark Public

- (instancetype __nonnull)initWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (void)addWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                           withId:(id)obj;

- (id<JavaUtilList>)getItemsWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType;

- (id)getSingleWithGHKParser_RuleType:(GHKParser_RuleType *)ruleType
                               withId:(id)defaultResult;

- (GHKToken *)getTokenWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType;

- (id<JavaUtilList>)getTokensWithGHKParser_TokenType:(GHKParser_TokenType *)tokenType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GHKAstNode)

J2OBJC_FIELD_SETTER(GHKAstNode, ruleType_, GHKParser_RuleType *)

FOUNDATION_EXPORT void GHKAstNode_initWithGHKParser_RuleType_(GHKAstNode *self, GHKParser_RuleType *ruleType);

FOUNDATION_EXPORT GHKAstNode *new_GHKAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GHKAstNode *create_GHKAstNode_initWithGHKParser_RuleType_(GHKParser_RuleType *ruleType);

J2OBJC_TYPE_LITERAL_HEADER(GHKAstNode)

@compatibility_alias GherkinAstNode GHKAstNode;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GherkinAstNode")
