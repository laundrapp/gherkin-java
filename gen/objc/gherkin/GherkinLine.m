//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/gherkin-java/src/main/java/gherkin/GherkinLine.java
//

#include "J2ObjC_source.h"
#include "gherkin/GherkinLanguageConstants.h"
#include "gherkin/GherkinLine.h"
#include "gherkin/GherkinLineSpan.h"
#include "gherkin/StringUtils.h"
#include "gherkin/SymbolCounter.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Scanner.h"
#include "java/util/regex/MatchResult.h"

@interface GherkinGherkinLine () {
 @public
  NSString *lineText_;
  NSString *trimmedLineText_;
}

@end

J2OBJC_FIELD_SETTER(GherkinGherkinLine, lineText_, NSString *)
J2OBJC_FIELD_SETTER(GherkinGherkinLine, trimmedLineText_, NSString *)

__attribute__((unused)) static id<JavaUtilList> GherkinGherkinLine_getSpansWithNSString_(GherkinGherkinLine *self, NSString *delimiter);

@implementation GherkinGherkinLine

- (instancetype __nonnull)initWithNSString:(NSString *)lineText {
  GherkinGherkinLine_initWithNSString_(self, lineText);
  return self;
}

- (JavaLangInteger *)indent {
  return JavaLangInteger_valueOfWithInt_(GherkinSymbolCounter_countSymbolsWithNSString_(lineText_) - GherkinSymbolCounter_countSymbolsWithNSString_(trimmedLineText_));
}

- (void)detach {
}

- (NSString *)getLineTextWithInt:(jint)indentToRemove {
  if (indentToRemove < 0 || indentToRemove > [((JavaLangInteger *) nil_chk([self indent])) intValue]) return trimmedLineText_;
  return [((NSString *) nil_chk(lineText_)) java_substring:indentToRemove];
}

- (jboolean)isEmpty {
  return [((NSString *) nil_chk(trimmedLineText_)) java_length] == 0;
}

- (jboolean)startsWithWithNSString:(NSString *)prefix {
  return [((NSString *) nil_chk(trimmedLineText_)) java_hasPrefix:prefix];
}

- (NSString *)getRestTrimmedWithInt:(jint)length {
  return [((NSString *) nil_chk([((NSString *) nil_chk(trimmedLineText_)) java_substring:length])) java_trim];
}

- (id<JavaUtilList>)getTags {
  return GherkinGherkinLine_getSpansWithNSString_(self, @"\\s+");
}

- (jboolean)startsWithTitleKeywordWithNSString:(NSString *)text {
  jint textLength = [((NSString *) nil_chk(text)) java_length];
  return [((NSString *) nil_chk(trimmedLineText_)) java_length] > textLength && [trimmedLineText_ java_hasPrefix:text] && [((NSString *) nil_chk([trimmedLineText_ java_substring:textLength endIndex:textLength + [((NSString *) nil_chk(GherkinGherkinLanguageConstants_TITLE_KEYWORD_SEPARATOR)) java_length]])) isEqual:GherkinGherkinLanguageConstants_TITLE_KEYWORD_SEPARATOR];
}

- (id<JavaUtilList>)getTableCells {
  id<JavaUtilList> lineSpans = create_JavaUtilArrayList_init();
  JavaLangStringBuilder *cell = create_JavaLangStringBuilder_init();
  jboolean beforeFirst = true;
  jint startCol = 0;
  for (jint col = 0; col < [((NSString *) nil_chk(trimmedLineText_)) java_length]; col++) {
    jchar c = [trimmedLineText_ charAtWithInt:col];
    if (c == '|') {
      if (beforeFirst) {
        beforeFirst = false;
      }
      else {
        jint contentStart = 0;
        while (contentStart < [cell java_length] && JavaLangCharacter_isWhitespaceWithChar_([cell charAtWithInt:contentStart])) {
          contentStart++;
        }
        if (contentStart == [cell java_length]) {
          contentStart = 0;
        }
        [lineSpans addWithId:create_GherkinGherkinLineSpan_initWithInt_withNSString_([((JavaLangInteger *) nil_chk([self indent])) intValue] + startCol + contentStart + 2, [((NSString *) nil_chk([cell description])) java_trim])];
        startCol = col;
      }
      cell = create_JavaLangStringBuilder_init();
    }
    else if (c == '\\') {
      col++;
      c = [trimmedLineText_ charAtWithInt:col];
      if (c == 'n') {
        [cell appendWithChar:0x000a];
      }
      else {
        if (c != '|' && c != '\\') {
          [cell appendWithChar:'\\'];
        }
        [cell appendWithChar:c];
      }
    }
    else {
      [cell appendWithChar:c];
    }
  }
  return lineSpans;
}

- (void)dealloc {
  RELEASE_(lineText_);
  RELEASE_(trimmedLineText_);
  [super dealloc];
}

@end

void GherkinGherkinLine_initWithNSString_(GherkinGherkinLine *self, NSString *lineText) {
  NSObject_init(self);
  JreStrongAssign(&self->lineText_, lineText);
  JreStrongAssign(&self->trimmedLineText_, GherkinStringUtils_ltrimWithNSString_(lineText));
}

GherkinGherkinLine *new_GherkinGherkinLine_initWithNSString_(NSString *lineText) {
  J2OBJC_NEW_IMPL(GherkinGherkinLine, initWithNSString_, lineText)
}

GherkinGherkinLine *create_GherkinGherkinLine_initWithNSString_(NSString *lineText) {
  J2OBJC_CREATE_IMPL(GherkinGherkinLine, initWithNSString_, lineText)
}

id<JavaUtilList> GherkinGherkinLine_getSpansWithNSString_(GherkinGherkinLine *self, NSString *delimiter) {
  id<JavaUtilList> lineSpans = create_JavaUtilArrayList_init();
  JavaUtilScanner *scanner = [create_JavaUtilScanner_initWithNSString_(self->trimmedLineText_) useDelimiterWithNSString:delimiter];
  while ([((JavaUtilScanner *) nil_chk(scanner)) hasNext]) {
    NSString *cell = [scanner next];
    jint column = [((id<JavaUtilRegexMatchResult>) nil_chk([scanner match])) start] + [((JavaLangInteger *) nil_chk([self indent])) intValue] + 1;
    [lineSpans addWithId:create_GherkinGherkinLineSpan_initWithInt_withNSString_(column, cell)];
  }
  return lineSpans;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GherkinGherkinLine)
