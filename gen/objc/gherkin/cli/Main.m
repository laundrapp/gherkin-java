//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/cli/Main.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "gherkin/cli/Main.h"
#include "gherkin/events/CucumberEvent.h"
#include "gherkin/events/SourceEvent.h"
#include "gherkin/stream/GherkinEvents.h"
#include "gherkin/stream/SourceEvents.h"
#include "gherkin/stream/Stdio.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@implementation GHKMain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  GHKMain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)argv {
  GHKMain_mainWithNSStringArray_(argv);
}

@end

void GHKMain_init(GHKMain *self) {
  NSObject_init(self);
}

GHKMain *new_GHKMain_init() {
  J2OBJC_NEW_IMPL(GHKMain, init)
}

GHKMain *create_GHKMain_init() {
  J2OBJC_CREATE_IMPL(GHKMain, init)
}

void GHKMain_mainWithNSStringArray_(IOSObjectArray *argv) {
  GHKMain_initialize();
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  id<JavaUtilList> args = create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(argv));
  id<JavaUtilList> paths = create_JavaUtilArrayList_init();
  jboolean printSource = true;
  jboolean printAst = true;
  jboolean printPickles = true;
  while (![args isEmpty]) {
    NSString *arg = [((NSString *) nil_chk([args removeWithInt:0])) java_trim];
    switch (JreIndexOfStr(arg, (id[]){ @"--no-source", @"--no-ast", @"--no-pickles" }, 3)) {
      case 0:
      printSource = false;
      break;
      case 1:
      printAst = false;
      break;
      case 2:
      printPickles = false;
      break;
      default:
      [paths addWithId:arg];
    }
  }
  GHKSourceEvents *sourceEvents = create_GHKSourceEvents_initWithJavaUtilList_(paths);
  GHKGherkinEvents *gherkinEvents = create_GHKGherkinEvents_initWithBoolean_withBoolean_withBoolean_(printSource, printAst, printPickles);
  for (GHKSourceEvent * __strong sourceEventEvent in sourceEvents) {
    for (id<GHKCucumberEvent> __strong cucumberEvent in nil_chk([gherkinEvents iterableWithGHKSourceEvent:sourceEventEvent])) {
      [((JavaIoPrintWriter *) nil_chk(JreLoadStatic(GHKStdio, out))) writeWithNSString:[((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:cucumberEvent]];
      [JreLoadStatic(GHKStdio, out) writeWithNSString:@"\n"];
      [JreLoadStatic(GHKStdio, out) flush];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKMain)
