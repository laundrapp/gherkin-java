//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gherkin/gherkin-java/src/main/java/gherkin/TokenMatcher.java
//

#include "J2ObjC_source.h"
#include "gherkin/GherkinDialect.h"
#include "gherkin/GherkinDialectProvider.h"
#include "gherkin/GherkinLanguageConstants.h"
#include "gherkin/IGherkinDialectProvider.h"
#include "gherkin/IGherkinLine.h"
#include "gherkin/Parser.h"
#include "gherkin/Token.h"
#include "gherkin/TokenMatcher.h"
#include "gherkin/ast/Location.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface GherkinTokenMatcher () {
 @public
  id<GherkinIGherkinDialectProvider> dialectProvider_;
  GherkinGherkinDialect *currentDialect_;
  NSString *activeDocStringSeparator_;
  jint indentToRemove_;
}

@end

J2OBJC_FIELD_SETTER(GherkinTokenMatcher, dialectProvider_, id<GherkinIGherkinDialectProvider>)
J2OBJC_FIELD_SETTER(GherkinTokenMatcher, currentDialect_, GherkinGherkinDialect *)
J2OBJC_FIELD_SETTER(GherkinTokenMatcher, activeDocStringSeparator_, NSString *)

inline JavaUtilRegexPattern *GherkinTokenMatcher_get_LANGUAGE_PATTERN(void);
static JavaUtilRegexPattern *GherkinTokenMatcher_LANGUAGE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GherkinTokenMatcher, LANGUAGE_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static jboolean GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(GherkinTokenMatcher *self, GherkinToken *token, GherkinParser_TokenType *tokenType, id<JavaUtilList> keywords);

__attribute__((unused)) static jboolean GherkinTokenMatcher_match_DocStringSeparatorWithGherkinToken_withNSString_withBoolean_(GherkinTokenMatcher *self, GherkinToken *token, NSString *separator, jboolean isOpen);

__attribute__((unused)) static NSString *GherkinTokenMatcher_unescapeDocStringWithNSString_(GherkinTokenMatcher *self, NSString *text);

J2OBJC_INITIALIZED_DEFN(GherkinTokenMatcher)

@implementation GherkinTokenMatcher

- (instancetype __nonnull)initWithGherkinIGherkinDialectProvider:(id<GherkinIGherkinDialectProvider>)dialectProvider {
  GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(self, dialectProvider);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  GherkinTokenMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)defaultDialectName {
  GherkinTokenMatcher_initWithNSString_(self, defaultDialectName);
  return self;
}

- (void)reset {
  JreStrongAssign(&activeDocStringSeparator_, nil);
  indentToRemove_ = 0;
  JreStrongAssign(&currentDialect_, [((id<GherkinIGherkinDialectProvider>) nil_chk(dialectProvider_)) getDefaultDialect]);
}

- (GherkinGherkinDialect *)getCurrentDialect {
  return currentDialect_;
}

- (void)setTokenMatchedWithGherkinToken:(GherkinToken *)token
            withGherkinParser_TokenType:(GherkinParser_TokenType *)matchedType
                           withNSString:(NSString *)text
                           withNSString:(NSString *)keyword
                    withJavaLangInteger:(JavaLangInteger *)indent
                       withJavaUtilList:(id<JavaUtilList>)items {
  JreStrongAssign(&((GherkinToken *) nil_chk(token))->matchedType_, matchedType);
  JreStrongAssign(&token->matchedKeyword_, keyword);
  JreStrongAssign(&token->matchedText_, text);
  JreStrongAssign(&token->mathcedItems_, items);
  JreStrongAssign(&token->matchedGherkinDialect_, [self getCurrentDialect]);
  token->matchedIndent_ = indent != nil ? [indent intValue] : (token->line_ == nil ? 0 : [((JavaLangInteger *) nil_chk([token->line_ indent])) intValue]);
  JreStrongAssignAndConsume(&token->location_, new_GherkinAstLocation_initWithInt_withInt_([((GherkinAstLocation *) nil_chk(token->location_)) getLine], token->matchedIndent_ + 1));
}

- (jboolean)match_EOFWithGherkinToken:(GherkinToken *)token {
  if ([((GherkinToken *) nil_chk(token)) isEOF]) {
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, EOF) withNSString:nil withNSString:nil withJavaLangInteger:nil withJavaUtilList:nil];
    return true;
  }
  return false;
}

- (jboolean)match_OtherWithGherkinToken:(GherkinToken *)token {
  NSString *text = [((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) getLineTextWithInt:indentToRemove_];
  [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, Other) withNSString:GherkinTokenMatcher_unescapeDocStringWithNSString_(self, text) withNSString:nil withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0) withJavaUtilList:nil];
  return true;
}

- (jboolean)match_EmptyWithGherkinToken:(GherkinToken *)token {
  if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) isEmpty]) {
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, Empty) withNSString:nil withNSString:nil withJavaLangInteger:nil withJavaUtilList:nil];
    return true;
  }
  return false;
}

- (jboolean)match_CommentWithGherkinToken:(GherkinToken *)token {
  if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithWithNSString:GherkinGherkinLanguageConstants_COMMENT_PREFIX]) {
    NSString *text = [token->line_ getLineTextWithInt:0];
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, Comment) withNSString:text withNSString:nil withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0) withJavaUtilList:nil];
    return true;
  }
  return false;
}

- (jboolean)match_LanguageWithGherkinToken:(GherkinToken *)token {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(GherkinTokenMatcher_LANGUAGE_PATTERN)) matcherWithJavaLangCharSequence:[((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) getLineTextWithInt:0]];
  if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    NSString *language = [matcher groupWithInt:1];
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, Language) withNSString:language withNSString:nil withJavaLangInteger:nil withJavaUtilList:nil];
    JreStrongAssign(&currentDialect_, [((id<GherkinIGherkinDialectProvider>) nil_chk(dialectProvider_)) getDialectWithNSString:language withGherkinAstLocation:token->location_]);
    return true;
  }
  return false;
}

- (jboolean)match_TagLineWithGherkinToken:(GherkinToken *)token {
  if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithWithNSString:GherkinGherkinLanguageConstants_TAG_PREFIX]) {
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, TagLine) withNSString:nil withNSString:nil withJavaLangInteger:nil withJavaUtilList:[token->line_ getTags]];
    return true;
  }
  return false;
}

- (jboolean)match_FeatureLineWithGherkinToken:(GherkinToken *)token {
  return GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(self, token, JreLoadEnum(GherkinParser_TokenType, FeatureLine), [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getFeatureKeywords]);
}

- (jboolean)match_BackgroundLineWithGherkinToken:(GherkinToken *)token {
  return GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(self, token, JreLoadEnum(GherkinParser_TokenType, BackgroundLine), [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getBackgroundKeywords]);
}

- (jboolean)match_ScenarioLineWithGherkinToken:(GherkinToken *)token {
  return GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(self, token, JreLoadEnum(GherkinParser_TokenType, ScenarioLine), [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getScenarioKeywords]);
}

- (jboolean)match_ScenarioOutlineLineWithGherkinToken:(GherkinToken *)token {
  return GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(self, token, JreLoadEnum(GherkinParser_TokenType, ScenarioOutlineLine), [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getScenarioOutlineKeywords]);
}

- (jboolean)match_ExamplesLineWithGherkinToken:(GherkinToken *)token {
  return GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(self, token, JreLoadEnum(GherkinParser_TokenType, ExamplesLine), [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getExamplesKeywords]);
}

- (jboolean)match_DocStringSeparatorWithGherkinToken:(GherkinToken *)token {
  return activeDocStringSeparator_ == nil ? GherkinTokenMatcher_match_DocStringSeparatorWithGherkinToken_withNSString_withBoolean_(self, token, GherkinGherkinLanguageConstants_DOCSTRING_SEPARATOR, true) || GherkinTokenMatcher_match_DocStringSeparatorWithGherkinToken_withNSString_withBoolean_(self, token, GherkinGherkinLanguageConstants_DOCSTRING_ALTERNATIVE_SEPARATOR, true) : GherkinTokenMatcher_match_DocStringSeparatorWithGherkinToken_withNSString_withBoolean_(self, token, activeDocStringSeparator_, false);
}

- (jboolean)match_StepLineWithGherkinToken:(GherkinToken *)token {
  id<JavaUtilList> keywords = [((GherkinGherkinDialect *) nil_chk(currentDialect_)) getStepKeywords];
  for (NSString * __strong keyword in nil_chk(keywords)) {
    if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithWithNSString:keyword]) {
      NSString *stepText = [token->line_ getRestTrimmedWithInt:[((NSString *) nil_chk(keyword)) java_length]];
      [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, StepLine) withNSString:stepText withNSString:keyword withJavaLangInteger:nil withJavaUtilList:nil];
      return true;
    }
  }
  return false;
}

- (jboolean)match_TableRowWithGherkinToken:(GherkinToken *)token {
  if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithWithNSString:GherkinGherkinLanguageConstants_TABLE_CELL_SEPARATOR]) {
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, TableRow) withNSString:nil withNSString:nil withJavaLangInteger:nil withJavaUtilList:[token->line_ getTableCells]];
    return true;
  }
  return false;
}

- (void)dealloc {
  RELEASE_(dialectProvider_);
  RELEASE_(currentDialect_);
  RELEASE_(activeDocStringSeparator_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GherkinTokenMatcher class]) {
    JreStrongAssign(&GherkinTokenMatcher_LANGUAGE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^\\s*#\\s*language\\s*:\\s*([a-zA-Z\\-_]+)\\s*$"));
    J2OBJC_SET_INITIALIZED(GherkinTokenMatcher)
  }
}

@end

void GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(GherkinTokenMatcher *self, id<GherkinIGherkinDialectProvider> dialectProvider) {
  NSObject_init(self);
  JreStrongAssign(&self->activeDocStringSeparator_, nil);
  self->indentToRemove_ = 0;
  JreStrongAssign(&self->dialectProvider_, dialectProvider);
  [self reset];
}

GherkinTokenMatcher *new_GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(id<GherkinIGherkinDialectProvider> dialectProvider) {
  J2OBJC_NEW_IMPL(GherkinTokenMatcher, initWithGherkinIGherkinDialectProvider_, dialectProvider)
}

GherkinTokenMatcher *create_GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(id<GherkinIGherkinDialectProvider> dialectProvider) {
  J2OBJC_CREATE_IMPL(GherkinTokenMatcher, initWithGherkinIGherkinDialectProvider_, dialectProvider)
}

void GherkinTokenMatcher_init(GherkinTokenMatcher *self) {
  GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(self, create_GherkinGherkinDialectProvider_init());
}

GherkinTokenMatcher *new_GherkinTokenMatcher_init() {
  J2OBJC_NEW_IMPL(GherkinTokenMatcher, init)
}

GherkinTokenMatcher *create_GherkinTokenMatcher_init() {
  J2OBJC_CREATE_IMPL(GherkinTokenMatcher, init)
}

void GherkinTokenMatcher_initWithNSString_(GherkinTokenMatcher *self, NSString *defaultDialectName) {
  GherkinTokenMatcher_initWithGherkinIGherkinDialectProvider_(self, create_GherkinGherkinDialectProvider_initWithNSString_(defaultDialectName));
}

GherkinTokenMatcher *new_GherkinTokenMatcher_initWithNSString_(NSString *defaultDialectName) {
  J2OBJC_NEW_IMPL(GherkinTokenMatcher, initWithNSString_, defaultDialectName)
}

GherkinTokenMatcher *create_GherkinTokenMatcher_initWithNSString_(NSString *defaultDialectName) {
  J2OBJC_CREATE_IMPL(GherkinTokenMatcher, initWithNSString_, defaultDialectName)
}

jboolean GherkinTokenMatcher_matchTitleLineWithGherkinToken_withGherkinParser_TokenType_withJavaUtilList_(GherkinTokenMatcher *self, GherkinToken *token, GherkinParser_TokenType *tokenType, id<JavaUtilList> keywords) {
  for (NSString * __strong keyword in nil_chk(keywords)) {
    if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithTitleKeywordWithNSString:keyword]) {
      NSString *title = [token->line_ getRestTrimmedWithInt:[((NSString *) nil_chk(keyword)) java_length] + [((NSString *) nil_chk(GherkinGherkinLanguageConstants_TITLE_KEYWORD_SEPARATOR)) java_length]];
      [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:tokenType withNSString:title withNSString:keyword withJavaLangInteger:nil withJavaUtilList:nil];
      return true;
    }
  }
  return false;
}

jboolean GherkinTokenMatcher_match_DocStringSeparatorWithGherkinToken_withNSString_withBoolean_(GherkinTokenMatcher *self, GherkinToken *token, NSString *separator, jboolean isOpen) {
  if ([((id<GherkinIGherkinLine>) nil_chk(((GherkinToken *) nil_chk(token))->line_)) startsWithWithNSString:separator]) {
    NSString *contentType = nil;
    if (isOpen) {
      contentType = [token->line_ getRestTrimmedWithInt:[((NSString *) nil_chk(separator)) java_length]];
      JreStrongAssign(&self->activeDocStringSeparator_, separator);
      self->indentToRemove_ = [((JavaLangInteger *) nil_chk([token->line_ indent])) intValue];
    }
    else {
      JreStrongAssign(&self->activeDocStringSeparator_, nil);
      self->indentToRemove_ = 0;
    }
    [self setTokenMatchedWithGherkinToken:token withGherkinParser_TokenType:JreLoadEnum(GherkinParser_TokenType, DocStringSeparator) withNSString:contentType withNSString:nil withJavaLangInteger:nil withJavaUtilList:nil];
    return true;
  }
  return false;
}

NSString *GherkinTokenMatcher_unescapeDocStringWithNSString_(GherkinTokenMatcher *self, NSString *text) {
  return self->activeDocStringSeparator_ != nil ? [((NSString *) nil_chk(text)) java_replace:@"\\\"\\\"\\\"" withSequence:@"\"\"\""] : text;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GherkinTokenMatcher)
