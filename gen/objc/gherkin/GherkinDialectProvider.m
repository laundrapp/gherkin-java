//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/gherkin-java/src/main/java/gherkin/GherkinDialectProvider.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "gherkin/GherkinDialect.h"
#include "gherkin/GherkinDialectProvider.h"
#include "gherkin/ParserException.h"
#include "gherkin/ast/Location.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface GHKGherkinDialectProvider () {
 @public
  NSString *default_dialect_name_;
}

@end

J2OBJC_FIELD_SETTER(GHKGherkinDialectProvider, default_dialect_name_, NSString *)

inline id<JavaUtilMap> GHKGherkinDialectProvider_get_DIALECTS(void);
inline id<JavaUtilMap> GHKGherkinDialectProvider_set_DIALECTS(id<JavaUtilMap> value);
static id<JavaUtilMap> GHKGherkinDialectProvider_DIALECTS;
J2OBJC_STATIC_FIELD_OBJ(GHKGherkinDialectProvider, DIALECTS, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(GHKGherkinDialectProvider)

@implementation GHKGherkinDialectProvider

- (instancetype __nonnull)initWithNSString:(NSString *)default_dialect_name {
  GHKGherkinDialectProvider_initWithNSString_(self, default_dialect_name);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  GHKGherkinDialectProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GHKGherkinDialect *)getDefaultDialect {
  return [self getDialectWithNSString:default_dialect_name_ withGHKALocation:nil];
}

- (GHKGherkinDialect *)getDialectWithNSString:(NSString *)language
                             withGHKALocation:(GHKALocation *)location {
  id<JavaUtilMap> map = [((id<JavaUtilMap>) nil_chk(GHKGherkinDialectProvider_DIALECTS)) getWithId:language];
  if (map == nil) {
    @throw create_GHKParserException_NoSuchLanguageException_initWithNSString_withGHKALocation_(language, location);
  }
  return create_GHKGherkinDialect_initWithNSString_withJavaUtilMap_(language, map);
}

- (id<JavaUtilList>)getLanguages {
  id<JavaUtilList> languages = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(GHKGherkinDialectProvider_DIALECTS)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_(languages);
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(languages);
}

- (void)dealloc {
  RELEASE_(default_dialect_name_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GHKGherkinDialectProvider class]) {
    {
      ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
      @try {
        JavaIoReader *dialects = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([GHKGherkinDialectProvider_class_() getResourceAsStream:@"/gherkin/gherkin-languages.json"], @"UTF-8");
        JreStrongAssign(&GHKGherkinDialectProvider_DIALECTS, [gson fromJsonWithJavaIoReader:dialects withIOSClass:JavaUtilMap_class_()]);
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
      }
    }
    J2OBJC_SET_INITIALIZED(GHKGherkinDialectProvider)
  }
}

@end

void GHKGherkinDialectProvider_initWithNSString_(GHKGherkinDialectProvider *self, NSString *default_dialect_name) {
  NSObject_init(self);
  JreStrongAssign(&self->default_dialect_name_, default_dialect_name);
}

GHKGherkinDialectProvider *new_GHKGherkinDialectProvider_initWithNSString_(NSString *default_dialect_name) {
  J2OBJC_NEW_IMPL(GHKGherkinDialectProvider, initWithNSString_, default_dialect_name)
}

GHKGherkinDialectProvider *create_GHKGherkinDialectProvider_initWithNSString_(NSString *default_dialect_name) {
  J2OBJC_CREATE_IMPL(GHKGherkinDialectProvider, initWithNSString_, default_dialect_name)
}

void GHKGherkinDialectProvider_init(GHKGherkinDialectProvider *self) {
  GHKGherkinDialectProvider_initWithNSString_(self, @"en");
}

GHKGherkinDialectProvider *new_GHKGherkinDialectProvider_init() {
  J2OBJC_NEW_IMPL(GHKGherkinDialectProvider, init)
}

GHKGherkinDialectProvider *create_GHKGherkinDialectProvider_init() {
  J2OBJC_CREATE_IMPL(GHKGherkinDialectProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHKGherkinDialectProvider)
